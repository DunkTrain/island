package ru.cooper.island.ui;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Slider;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import ru.cooper.island.config.SimulationConfig;
import ru.cooper.island.core.model.Animal;
import ru.cooper.island.core.model.map.IslandCell;
import ru.cooper.island.core.model.map.IslandGrid;
import ru.cooper.island.services.initialization.WorldInitializer;
import ru.cooper.island.services.lifecycle.WorldLifeCycle;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä JavaFX-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–û—Å—Ç—Ä–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö".
 * <p>
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * <ul>
 *     <li>–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏</li>
 *     <li>–û—Å—Ç–∞–Ω–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏</li>
 *     <li>–°–±—Ä–æ—Å (–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ) —Å–∏–º—É–ª—è—Ü–∏–∏</li>
 *     <li>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ —Å–µ—Ç–∫–µ)</li>
 * </ul>
 * –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å UI –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤–Ω—É—Ç—Ä–∏ JavaFX Application Thread.
 */
public class MainController {

    @FXML
    private GridPane islandGridPane;

    @FXML
    private Label statusLabel;

    @FXML
    private Button startButton;

    @FXML
    private Button stopButton;

    @FXML
    private Button resetButton;

    @FXML
    private Slider speedSlider;

    private WorldLifeCycle worldLifeCycle;

    /**
     * Map, —Å–≤—è–∑—ã–≤–∞—é—â–∞—è –∏–º—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (String) —Å —Ü–≤–µ—Ç–æ–º (Color),
     * —á—Ç–æ–±—ã –∫–ª–µ—Ç–∫–∞ —Å –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º –∫—Ä–∞—Å–∏–ª–∞—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º.
     */
    private final Map<String, Color> animalColors = new HashMap<>();

    /**
     * –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Å–∏–º—É–ª—è—Ü–∏—è.
     */
    private final AtomicBoolean simulationRunning = new AtomicBoolean(false);

    /**
     * –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö.
     */
    private static final int CELL_SIZE = 50;

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞.
     * <p>
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ FXML.
     * –í —ç—Ç–æ–º –º–µ—Ç–æ–¥–µ:
     * <ul>
     *     <li>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∫–∞—Ä—Ç–∞ —Ü–≤–µ—Ç–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö</li>
     *     <li>–í—ã–∑—ã–≤–∞–µ—Ç—Å—è {@link #resetSimulation()} –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è</li>
     *     <li>–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏</li>
     * </ul>
     */
    @FXML
    public void initialize() {
        initializeAnimalColors();
        resetSimulation();

        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏, —á—Ç–æ–±—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏
        speedSlider.valueProperty().addListener((obs, oldVal, newVal) -> {
            if (worldLifeCycle != null) {
                worldLifeCycle.setStepDuration(newVal.intValue());
            }
        });
    }

    /**
     * –ó–∞–ø–æ–ª–Ω—è–µ—Ç {@link #animalColors} —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.
     */
    private void initializeAnimalColors() {
        animalColors.put("Wolf", Color.DARKGRAY);
        animalColors.put("Fox", Color.ORANGE);
        animalColors.put("Bear", Color.BROWN);
        animalColors.put("Eagle", Color.DARKBLUE);
        animalColors.put("Horse", Color.SADDLEBROWN);
        animalColors.put("Deer", Color.BURLYWOOD);
        animalColors.put("Rabbit", Color.LIGHTGRAY);
        animalColors.put("Mouse", Color.LIGHTGREY);
        animalColors.put("Goat", Color.BEIGE);
        animalColors.put("Sheep", Color.WHITE);
        animalColors.put("Boar", Color.DARKRED);
        animalColors.put("Buffalo", Color.DARKSLATEGRAY);
        animalColors.put("Duck", Color.YELLOW);
        animalColors.put("Caterpillar", Color.GREENYELLOW);
        animalColors.put("Snake", Color.GREEN);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Start".
     * <p>
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ë–ª–æ–∫–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É Start,
     * —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É Stop –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É Reset.
     */
    @FXML
    public void handleStartSimulation() {
        if (!simulationRunning.get()) {
            simulationRunning.set(true);
            startButton.setDisable(true);
            stopButton.setDisable(false);
            resetButton.setDisable(true);

            int stepDuration = (int) speedSlider.getValue();
            worldLifeCycle.setStepDuration(stepDuration);

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            new Thread(() -> {
                worldLifeCycle.setUIUpdateCallback(this::updateUI);
                worldLifeCycle.start();
            }).start();

            statusLabel.setText("Simulation running");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Stop".
     * <p>
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.
     * –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É Start, –±–ª–æ–∫–∏—Ä—É–µ—Ç Stop –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç Reset.
     */
    @FXML
    public void handleStopSimulation() {
        if (simulationRunning.get()) {
            worldLifeCycle.stop();
            simulationRunning.set(false);

            startButton.setDisable(false);
            stopButton.setDisable(true);
            resetButton.setDisable(false);

            statusLabel.setText("Simulation stopped");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Reset".
     * <p>
     * –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –º–∏—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–∏–º—É–ª—è—Ü–∏—é.
     */
    @FXML
    public void handleResetSimulation() {
        resetSimulation();
        statusLabel.setText("Simulation reset");
    }

    /**
     * –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–∏–º—É–ª—è—Ü–∏–∏:
     * <ul>
     *     <li>–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ {@link #simulationRunning}</li>
     *     <li>–°–æ–∑–¥–∞—ë—Ç {@link WorldInitializer} –∏ {@link WorldLifeCycle}</li>
     *     <li>–í—ã–∑—ã–≤–∞–µ—Ç {@link #initializeGridUI(IslandGrid)} –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</li>
     * </ul>
     */
    private void resetSimulation() {
        simulationRunning.set(false);
        startButton.setDisable(false);
        stopButton.setDisable(true);
        resetButton.setDisable(false);

        // –ë–µ—Ä—ë–º –Ω–∞–ø—Ä—è–º—É—é
        int gridHeight = SimulationConfig.FIELD_TO_SIZE_Y;
        int gridWidth  = SimulationConfig.FIELD_TO_SIZE_X;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏—Ä –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
        WorldInitializer worldInitializer = new WorldInitializer(gridHeight, gridWidth);
        worldLifeCycle   = new WorldLifeCycle(worldInitializer);

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º UI
        initializeGridUI(worldInitializer.getIslandGrid());
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –≤–∏–¥–∏–º—É—é —Å–µ—Ç–∫—É –≤ UI (GridPane) –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö {@link IslandGrid}.
     *
     * @param islandGrid –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–ª–µ—Ç–∫–∞—Ö.
     */
    private void initializeGridUI(IslandGrid islandGrid) {
        if (islandGridPane != null) {
            islandGridPane.getChildren().clear();
            islandGridPane.getRowConstraints().clear();
            islandGridPane.getColumnConstraints().clear();

            for (int y = 0; y < islandGrid.getHeight(); y++) {
                for (int x = 0; x < islandGrid.getWidth(); x++) {
                    IslandCell cell = islandGrid.getLocation(y, x);
                    if (cell != null) {
                        StackPane cellPane = createCellPane(cell);
                        islandGridPane.add(cellPane, x, y);
                    }
                }
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç {@link StackPane} –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ (—Ñ–æ–Ω + —Ç–µ–∫—Å—Ç).
     *
     * @param cell –∫–ª–µ—Ç–∫–∞ –æ—Å—Ç—Ä–æ–≤–∞
     * @return {@link StackPane}, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –∫–ª–µ—Ç–∫—É.
     */
    private StackPane createCellPane(IslandCell cell) {
        StackPane stackPane = new StackPane();
        stackPane.setPrefSize(CELL_SIZE, CELL_SIZE);

        Rectangle background = new Rectangle(CELL_SIZE, CELL_SIZE);
        background.setFill(Color.FORESTGREEN);
        background.setStroke(Color.BLACK);
        background.setStrokeWidth(0.5);

        Text cellInfo = new Text();
        updateCellInfo(cellInfo, cell);

        stackPane.getChildren().addAll(background, cellInfo);
        return stackPane;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º {@code cellInfo} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ {@code cell}.
     *
     * @param cellInfo —ç–ª–µ–º–µ–Ω—Ç {@link Text} –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     * @param cell     –∫–ª–µ—Ç–∫–∞ –æ—Å—Ç—Ä–æ–≤–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±–µ—Ä—É—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
     */
    private void updateCellInfo(Text cellInfo, IslandCell cell) {
        String dominantType = getDominantAnimalType(cell);
        cellInfo.setText(dominantType);
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç ¬´–¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ¬ª –∂–∏–≤–æ—Ç–Ω–æ–µ (–∏–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ) –≤ –∫–ª–µ—Ç–∫–µ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     *
     * @param cell –∫–ª–µ—Ç–∫–∞
     * @return —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "Wolf (3)" –∏–ª–∏ "üåø 15.0", –ª–∏–±–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    private String getDominantAnimalType(IslandCell cell) {
        String dominantType = "";
        int maxCount = 0;

        for (Map.Entry<Class<? extends Animal>, Set<Animal>> entry : cell.getAnimals().entrySet()) {
            int count = entry.getValue().size();
            if (count > maxCount) {
                maxCount = count;
                dominantType = entry.getKey().getSimpleName(); // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            }
        }

        if (maxCount > 0) {
            return dominantType + " (" + maxCount + ")";
        } else if (cell.getPlant() > 0) {
            return "üåø " + String.format("%.1f", cell.getPlant());
        } else {
            return "";
        }
    }

    /**
     * Callback, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI.
     * <p>
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç {@code Platform.runLater}, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–ª–∏ –≤ JavaFX Application Thread.
     *
     * @param islandGrid —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫.
     */
    public void updateUI(IslandGrid islandGrid) {
        Platform.runLater(() -> {
            for (int y = 0; y < islandGrid.getHeight(); y++) {
                for (int x = 0; x < islandGrid.getWidth(); x++) {
                    IslandCell cell = islandGrid.getLocation(y, x);
                    if (cell != null) {
                        updateCell(y, x, cell);
                    }
                }
            }
            statusLabel.setText("Simulation step: " + worldLifeCycle.getSimulationStepNumber());
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç UI (—Ü–≤–µ—Ç –∏ —Ç–µ–∫—Å—Ç) –¥–ª—è –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –≤ {@link GridPane}.
     *
     * @param row  –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
     * @param col  –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞
     * @param cell –¥–∞–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
     */
    private void updateCell(int row, int col, IslandCell cell) {
        if (islandGridPane != null) {
            StackPane cellPane = null;
            for (javafx.scene.Node node : islandGridPane.getChildren()) {
                Integer nodeRow = GridPane.getRowIndex(node);
                Integer nodeCol = GridPane.getColumnIndex(node);
                if (nodeRow != null && nodeCol != null && nodeRow == row && nodeCol == col) {
                    cellPane = (StackPane) node;
                    break;
                }
            }

            if (cellPane != null && cellPane.getChildren().size() >= 2) {
                Rectangle background = (Rectangle) cellPane.getChildren().get(0);
                Text cellInfo = (Text) cellPane.getChildren().get(1);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                updateCellInfo(cellInfo, cell);

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∫–ª–µ—Ç–∫–∏
                String dominantType = getDominantAnimalType(cell).split(" ")[0];
                if (animalColors.containsKey(dominantType)) {
                    background.setFill(animalColors.get(dominantType));
                } else if (cell.getPlant() > 0) {
                    double maxPlantAmount = 200.0;
                    try {
                        java.lang.reflect.Field maxPlantField = SimulationConfig.class.getDeclaredField("MAX_AMOUNT_OF_PLANT_ON_ONE_CELL");
                        maxPlantField.setAccessible(true);
                        maxPlantAmount = (double) maxPlantField.get(null);
                    } catch (Exception e) {
                        System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å MAX_AMOUNT_OF_PLANT_ON_ONE_CELL: " + e.getMessage());
                    }
                    double intensity = Math.min(1.0, cell.getPlant() / maxPlantAmount);
                    background.setFill(Color.rgb(34, (int) (139 + 116 * intensity), 34));
                } else {
                    background.setFill(Color.FORESTGREEN);
                }
            }
        }
    }
}
