package ru.cooper.island.entities.islandMap

import ru.cooper.island.entities.animals.herbivores.*
import ru.cooper.island.entities.animals.predators.*
import ru.cooper.island.entities.organism.Animal
import ru.cooper.island.services.AnimalSimulationTask
import ru.cooper.island.services.PlantGrowthTask
import ru.cooper.island.settings.IslandSettings
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import java.util.concurrent.locks.Lock
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.Volatile
import kotlin.math.min

/**
 * Location - –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –æ—Ç–¥–µ–ª—å–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ "–û—Å—Ç—Ä–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö".
 * –ö–∞–∂–¥–∞—è –ª–æ–∫–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (–ø–æ–∑–∏—Ü–∏–∏), –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞—Å—Ç–µ–Ω–∏–π, —Å–æ—Å–µ–¥–Ω–∏—Ö –ª–æ–∫–∞—Ü–∏—è—Ö –∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö.
 * –õ–æ–∫–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ —Ä–æ—Å—Ç–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–∏–º –¥–∞–Ω–Ω—ã–º.
 */
class Location(@JvmField val coordinate_Y: Int, @JvmField val coordinate_X: Int) {
    private val threadPool: ExecutorService = Executors.newFixedThreadPool(4)

    @JvmField
    @Volatile
    var plant: Double = 0.0

    @JvmField
    val neighboringLocations: List<Location> = ArrayList()

    @JvmField
    val animals: Map<Class<out Animal>, MutableSet<Animal>> = ConcurrentHashMap()

    @JvmField
    val lock: Lock = ReentrantLock(true)

    fun start() {
        lock.lock()
        try {
            for (animalClass in animals.keys) {
                for (animal in animals[animalClass]!!) {
                    threadPool.submit(AnimalSimulationTask(animal, this))
                }
            }
            threadPool.submit(PlantGrowthTask(this))
        } finally {
            lock.unlock()
        }
    }

    @Throws(InterruptedException::class)
    fun await(milliseconds: Int) {
        threadPool.awaitTermination(milliseconds.toLong(), TimeUnit.MILLISECONDS)
    }

    fun shutdown() {
        threadPool.shutdown()
    }

    fun removeAnimal(animal: Animal) {
        animals[animal.javaClass]!!.remove(animal)
    }

    fun addAnimalToLocation(animal: Animal) {
        if (isThereEnoughSpace(animal.javaClass)) {
            animals[animal.javaClass]!!.add(animal)
        }
    }

    fun isThereEnoughSpace(animalClass: Class<out Animal>): Boolean {
        return animals[animalClass]!!.size < IslandSettings.ANIMAL_PARAMETERS[animalClass]!![1]
    }

    fun plantGrowth() {
        lock.lock()
        try {
            val plantGrowth = IslandSettings.GROWTH_OF_PLANT
            val newPlantValue = this.plant + plantGrowth
            this.plant = min(newPlantValue, IslandSettings.MAX_AMOUNT_OF_PLANT_ON_ONE_CELL)
        } finally {
            lock.unlock()
        }
    }

    override fun toString(): String {
        val sb = StringBuilder()
        sb.append("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–æ–∫–∞—Ü–∏–∏: [").append(coordinate_X).append(", ").append(coordinate_Y).append("]\n")

        // –ñ–∏–≤–æ—Ç–Ω—ã–µ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏
        sb.append("–ñ–∏–≤–æ—Ç–Ω—ã–µ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏:\n")
        for (animalClass in animals.keys) {
            val animalCount = animals[animalClass]!!.size
            if (animalCount > 0) {
                val animalName = animalClass.simpleName
                sb.append("\t").append(animalName).append(": ").append(animalCount).append(" ")
                    .append(getAnimalEmoji(animalName)).append("\n")
            }
        }

        // –†–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏
        sb.append("–†–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: ").append(String.format("%.2f", plant)).append(" ").append("\uD83C\uDF31")
            .append("\n\n")

        return ("""
     [üêª${animals[Bear::class.java]!!.size}üê≤${animals[Snake::class.java]!!.size}üêó${animals[Boar::class.java]!!.size}üêÉ${animals[Buffalo::class.java]!!.size}ü¶å${animals[Deer::class.java]!!.size}ü¶ä${animals[Fox::class.java]!!.size}üêê${animals[Goat::class.java]!!.size}ü¶Ñ${
            animals.get(
                Horse::class.java
            )!!.size
        }üêÅ${animals[Mouse::class.java]!!.size}üêá${animals[Rabbit::class.java]!!.size}üêë${animals[Sheep::class.java]!!.size}üê∫${animals[Wolf::class.java]!!.size}ü¶Ü${animals[Duck::class.java]!!.size}ü¶Ö${animals[Eagle::class.java]!!.size}üêõ${animals[Caterpillar::class.java]!!.size}üå±${
            String.format(
                "%.2f",
                plant
            )
        }]
     $sb
     """.trimIndent())
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–∞–π–ª–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    private fun getAnimalEmoji(animalName: String): String {
        return when (animalName) {
            "Bear" -> "\uD83D\uDC3B"
            "Snake" -> "\uD83D\uDC32"
            "Boar" -> "\uD83D\uDC17"
            "Buffalo" -> "\uD83D\uDC03"
            "Deer" -> "\uD83E\uDD8C"
            "Fox" -> "\uD83E\uDD8A"
            "Goat" -> "\uD83D\uDC10"
            "Horse" -> "\uD83E\uDD84"
            "Mouse" -> "\uD83D\uDC01"
            "Rabbit" -> "\uD83D\uDC07"
            "Sheep" -> "\uD83D\uDC11"
            "Wolf" -> "\uD83D\uDC3A"
            "Duck" -> "\uD83E\uDD86"
            "Eagle" -> "\uD83E\uDD85"
            "Caterpillar" -> "\uD83D\uDC1B"
            else -> ""
        }
    }
}